globals:
  - id: tempstate1
    type: float
    restore_value: no
    initial_value: '0'
  - id: tempstate2
    type: float
    restore_value: no
    initial_value: '0'

esphome:
  name: vivarium
  friendly_name: vivarium
  min_version: 2025.5.0
  name_add_mac_suffix: false
  comment: "Automated environmenal control for snake housing"
  area: "Living Room"

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

web_server:
  port: 80
  version: 3
  ota: false

switch:
  - platform: gpio
    pin: GPIO13
    inverted: true
    id: relay4
    name: "Pump"
    icon: "mdi:water-pump"
    on_turn_on:
    - delay: 5000ms
    - switch.turn_off: relay4
  - platform: output
    name: "Heat 1 switch"
    output: 'relay3pwm'
  - platform: output
    name: "Heat 2 switch"
    output: 'relay2pwm'


    
time:
  - platform: sntp
    id: sntp_time
    timezone: America/Edmonton
    on_time:
    - cron: '0 5 10 * * *'
      then:
        - switch.toggle: relay4  
    - cron: '0 0 8 * * *'
      then:
        - climate.control: 
            id: climate1
            mode: HEAT
            target_temperature: 32°C
        - climate.control: 
            id: climate2
            mode: HEAT
            target_temperature: 35°C
    - cron: '0 0 22 * * *'
      then:
        - climate.control:
            id: climate1
            mode: HEAT
            target_temperature: 24°C
        - climate.control: 
            id: climate2
            mode: HEAT
            target_temperature: 24°C

spi:
  - id: spi_bus0
    clk_pin: GPIO5
    miso_pin: GPIO19
    interface: hardware
  - id: spi_bus1
    clk_pin: GPIO26
    miso_pin: GPIO33
    interface: software

sensor:
  - platform: max6675
    spi_id: spi_bus0
    id: snaketemp1
    name: "Snake Temperature"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
    cs_pin: GPIO23
    update_interval: 6s
    filters: 
      - clamp: 
          min_value: 12
          max_value: 60
      - exponential_moving_average:
          alpha: 0.5
          send_every: 5
          send_first_at: 1
  - platform: max6675
    spi_id: spi_bus1
    id: snaketemp2
    name: "Snake Temperature 2"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
    cs_pin: GPIO25
    update_interval: 6s
    filters: 
      - clamp: 
          min_value: 12
          max_value: 60
      - exponential_moving_average:
          alpha: 0.5
          send_every: 5
          send_first_at: 1

climate:
  - platform: pid
    id: climate1
    name: "PID Climate Controller 1"
    sensor: snaketemp1
    default_target_temperature: 32°C
    heat_output: relay3pwm
    control_parameters:
      kp: 5.0 #0.6  #basic zeigler-nichols tuning  values
      ki: 3.0 #0.027
      kd: 3.0 #3.375
      output_averaging_samples: 5      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples
    deadband_parameters:
      threshold_high: 0.5°C       
      threshold_low: -0.5°C
      kp_multiplier: 1
      ki_multiplier: 0.1 
    visual:
      min_temperature: 18
      max_temperature: 40
      temperature_step: 0.1
  - platform: pid
    id: climate2
    name: "PID Climate Controller 2"
    sensor: snaketemp2
    default_target_temperature: 35°C
    heat_output: relay2pwm
    control_parameters:
      kp: 8.0  #basic zeigler-nichols tuning  values
      ki: 3.0
      kd: 8.0
      output_averaging_samples: 5      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples
    deadband_parameters:
      threshold_high: 0.5°C       
      threshold_low: -1.5°C
      kp_multiplier: 1
      ki_multiplier: 0.1 
    visual:
      min_temperature: 18
      max_temperature: 40
      temperature_step: 0.1

output:
  #- platform: slow_pwm
  #  pin: GPIO12
  #  id: relay3pwm
  #  period: 30s
  - platform: sigma_delta_output
    update_interval: 10s
    id: relay3pwm
    pin: GPIO12
    min_power: 0.01
    max_power: 1.00
  - platform: sigma_delta_output
    pin: GPIO14
    id: relay2pwm
    update_interval: 10s
    min_power: 0.01
    max_power: 0.70

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true
  frequency: 10kHz

display: 
  - platform: lcd_pcf8574
    dimensions: 20x4
    address: 0x27
    user_characters:
      - position: 0
        data: 
          - 0b00100
          - 0b01110
          - 0b11111
          - 0b00100
          - 0b00100
          - 0b00100
          - 0b00100
          - 0b00100
      - position: 1
        data: 
          - 0b00100
          - 0b00100
          - 0b00100
          - 0b00100
          - 0b00100
          - 0b11111
          - 0b01110
          - 0b00100
    update_interval: 10s
    lambda: |-
      const unsigned char deg_sign[] = {0xDF, 0};

      it.strftime(0, 0, "%H:%M - %d.%b.%Y", id(sntp_time).now());
      if (id(snaketemp1).state < id(tempstate1)) {
        it.printf(0, 2, "1: %.1f%sC (%.1F%sC) \x08", id(snaketemp1).state, deg_sign, id(climate1).target_temperature, deg_sign);
      } else {
        it.printf(0, 2, "1: %.1f%sC (%.1F%sC) \x01", id(snaketemp1).state, deg_sign, id(climate1).target_temperature, deg_sign);}
      if (id(snaketemp2).state < id(tempstate2)) {
        it.printf(0, 3, "2: %.1f%sC (%.1F%sC) \x08", id(snaketemp2).state, deg_sign, id(climate2).target_temperature, deg_sign);
      } else {
        it.printf(0, 3, "2: %.1f%sC (%.1F%sC) \x01", id(snaketemp2).state, deg_sign, id(climate2).target_temperature, deg_sign);}
      id(tempstate1) = id(snaketemp1).state;
      id(tempstate2) = id(snaketemp2).state;
